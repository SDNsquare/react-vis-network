{"version":3,"file":"static/preview.448ec473e21ffecbdb6a.bundle.js","sources":["webpack:///./src/Module.js"],"sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { reactToSvgImageUrl } from './util/svg';\nimport RafDebouncer from './util/RafDebouncer';\n\nconst style = {\n  position: 'absolute',\n  display: 'none',\n  top: 0,\n  left: 0\n};\n\nexport default class VisModule extends PureComponent {\n  decoratorRef = React.createRef();\n  drawDebouncer = new RafDebouncer();\n  hasAfterDrawingListener = false;\n\n  updateNetwork = () => {\n    const {\n      decorator,\n      vis: { network }\n    } = this.props;\n\n    if (!this.hasAfterDrawingListener && decorator) {\n      this.hasAfterDrawingListener = true;\n      network.on('afterDrawing', this.moveDecorator);\n    }\n\n    if (this.hasAfterDrawingListener && !decorator) {\n      network.off('afterDrawing', this.moveDecorator);\n      this.hasAfterDrawingListener = false;\n    }\n\n    if (this.hasAfterDrawingListener) {\n      this.moveDecorator();\n    }\n  };\n\n  moveDecorator = () =>\n    this.drawDebouncer.requestAnimationFrame(() => {\n      const {\n        id,\n        vis: { network }\n      } = this.props;\n      const decoratorEl = this.decoratorRef.current;\n\n      if (network && decoratorEl) {\n        const { [id]: canvasPosition } = network.getPositions([id]);\n\n        if (canvasPosition) {\n          const domPosition = network.canvasToDOM(canvasPosition);\n          const { height, width } = decoratorEl.getBoundingClientRect();\n\n          const x = domPosition.x - width / 2;\n          const y = domPosition.y - height / 2;\n\n          decoratorEl.style.display = 'block';\n          decoratorEl.style.transform = `translateX(${x}px) translateY(${y}px)`;\n        }\n      }\n    });\n\n  updateDecorator() {\n    const {\n      vis: { network },\n      decorator\n    } = this.props;\n\n    // Initial load, skip\n    if (!network) {\n      return;\n    }\n\n    if (!this.hasAfterDrawingListener && decorator) {\n      this.hasAfterDrawingListener = true;\n      network.on('afterDrawing', this.moveDecorator);\n    }\n\n    if (this.hasAfterDrawingListener && !decorator) {\n      network.off('afterDrawing', this.moveDecorator);\n      this.hasAfterDrawingListener = false;\n    }\n\n    if (this.hasAfterDrawingListener) {\n      this.moveDecorator();\n    }\n  }\n\n  getModuleOptions() {\n    const { component, ...entityOptions } = this.props;\n    const options = { ...entityOptions };\n\n    if (component) {\n      options.image = reactToSvgImageUrl(component(this.props));\n      options.shape = options.shape || 'image';\n    }\n\n    return options;\n  }\n\n  componentDidMount() {\n    this.updateDecorator();\n  }\n\n  componentDidUpdate() {\n    this.updateDecorator();\n  }\n\n  componentWillUnmount() {\n    const {\n      vis: { network }\n    } = this.props;\n\n    if (this.hasAfterDrawingListener) {\n      network.off('afterDrawing', this.moveDecorator);\n    }\n  }\n\n  render() {\n    const {\n      decorator,\n      vis: { network }\n    } = this.props;\n\n    return (\n      <>\n        {network &&\n          decorator && (\n            <div style={style} ref={this.decoratorRef}>\n              {decorator(this.props)}\n            </div>\n          )}\n      </>\n    );\n  }\n\n  static propTypes = {\n    id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n    component: PropTypes.oneOfType([PropTypes.bool, PropTypes.func]),\n    decorator: PropTypes.oneOfType([PropTypes.bool, PropTypes.func]),\n    vis: PropTypes.shape({\n      nodes: PropTypes.object.isRequired,\n      edges: PropTypes.object.isRequired,\n      network: PropTypes.object\n    })\n  };\n}\n"],"mappings":"AAAA","sourceRoot":""}